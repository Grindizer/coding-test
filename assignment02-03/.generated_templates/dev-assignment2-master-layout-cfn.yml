---
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport : "true"
      EnableDnsHostnames : "true"
      Tags:
        - Key: Name
          Value: { "Ref": "AWS::StackName" }

  DefaultRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: VPC }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Default Route Table" ] ] }


  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Internet Gateway" ] ] }

  InternetGatewayVpcAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: { Ref: VPC }
      InternetGatewayId: { Ref: InternetGateway }

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: VPC }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Public Route Table" ] ] }

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: { Ref: PublicRouteTable }
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: { Ref : InternetGateway }
    DependsOn: InternetGatewayVpcAssociation

  
  
  PublicSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.0.0/24"
      AvailabilityZone: { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Public Subnet Zone 1" ] ] }
        - Key: Tier
          Value: Public

      
  PublicSubnetZone1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PublicSubnetZone1 }
      RouteTableId: { Ref: PublicRouteTable }


        
  PublicNatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }
    DependsOn: InternetGatewayVpcAssociation

  PublicNatGatewayZone1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: { "Fn::GetAtt": ["PublicNatGatewayEIP1", "AllocationId"] }
      SubnetId: { Ref: PublicSubnetZone1 }
        
       


      
  PublicSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.2.0/24"
      AvailabilityZone: { "Fn::Select" : [ 1, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Public Subnet Zone 2" ] ] }
        - Key: Tier
          Value: Public

      
  PublicSubnetZone2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PublicSubnetZone2 }
      RouteTableId: { Ref: PublicRouteTable }


        
  PublicNatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }
    DependsOn: InternetGatewayVpcAssociation

  PublicNatGatewayZone2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: { "Fn::GetAtt": ["PublicNatGatewayEIP2", "AllocationId"] }
      SubnetId: { Ref: PublicSubnetZone2 }
        
       


      
  PublicSubnetZone3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.4.0/24"
      AvailabilityZone: { "Fn::Select" : [ 2, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Public Subnet Zone 3" ] ] }
        - Key: Tier
          Value: Public

      
  PublicSubnetZone3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PublicSubnetZone3 }
      RouteTableId: { Ref: PublicRouteTable }


        
  PublicNatGatewayEIP3:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }
    DependsOn: InternetGatewayVpcAssociation

  PublicNatGatewayZone3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: { "Fn::GetAtt": ["PublicNatGatewayEIP3", "AllocationId"] }
      SubnetId: { Ref: PublicSubnetZone3 }
        
       


      
  PrivateSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.1.0/24"
      AvailabilityZone: { "Fn::Select" : [ 0, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Subnet Zone 1" ] ] }
        - Key: Tier
          Value: Private

      
  PrivatePrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: VPC }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Route Table Zone 1" ] ] }

  RouteToNatZone1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: { Ref: PrivatePrivateRouteTable1 }
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: { Ref: PublicNatGatewayZone1 }

  PrivateSubnetZone1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PrivateSubnetZone1 }
      RouteTableId: { Ref: PrivatePrivateRouteTable1 }

       


      
  PrivateSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.3.0/24"
      AvailabilityZone: { "Fn::Select" : [ 1, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Subnet Zone 2" ] ] }
        - Key: Tier
          Value: Private

      
  PrivatePrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: VPC }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Route Table Zone 2" ] ] }

  RouteToNatZone2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: { Ref: PrivatePrivateRouteTable2 }
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: { Ref: PublicNatGatewayZone2 }

  PrivateSubnetZone2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PrivateSubnetZone2 }
      RouteTableId: { Ref: PrivatePrivateRouteTable2 }

       


      
  PrivateSubnetZone3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: { Ref: VPC }
      CidrBlock: "192.168.5.0/24"
      AvailabilityZone: { "Fn::Select" : [ 2, { "Fn::GetAZs" : "" } ] }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Subnet Zone 3" ] ] }
        - Key: Tier
          Value: Private

      
  PrivatePrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: VPC }
      Tags:
        - Key: Name
          Value: { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "Private Route Table Zone 3" ] ] }

  RouteToNatZone3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: { Ref: PrivatePrivateRouteTable3 }
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: { Ref: PublicNatGatewayZone3 }

  PrivateSubnetZone3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: { Ref: PrivateSubnetZone3 }
      RouteTableId: { Ref: PrivatePrivateRouteTable3 }

       


    

Outputs:
  VpcId:
    Description: "@AWS::EC2::VPC::Id of the created VPC."
    Value:
      Ref: VPC


  PublicSubnetList:
    Description: "@List<AWS::EC2::Subnet::Id> of Public tier."
    Value:
      "Fn::Join":
        - ","
        -
          - { Ref : "PublicSubnetZone1" }
          - { Ref : "PublicSubnetZone2" }
          - { Ref : "PublicSubnetZone3" }
  PrivateSubnetList:
    Description: "@List<AWS::EC2::Subnet::Id> of Private tier."
    Value:
      "Fn::Join":
        - ","
        -
          - { Ref : "PrivateSubnetZone1" }
          - { Ref : "PrivateSubnetZone2" }
          - { Ref : "PrivateSubnetZone3" }
  SubnetsCidr:
    Description: "@List<String> of all subnets in the vpc"
    Value: "192.168.0.0/24,192.168.2.0/24,192.168.4.0/24,192.168.1.0/24,192.168.3.0/24,192.168.5.0/24"

  VpcCidr:
    Description: "@List<String> of the vpc vpc"
    Value: "192.168.0.0/16"
